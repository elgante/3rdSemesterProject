@page "/my-classes/{ClassId}/update-lesson/{LessonId}"

@using Microsoft.AspNetCore.Components
@using Domain.DTOs.LessonDTO
@using Domain.Models
@using HttpClients.ClientInterfaces
@using HttpClients.Implementations
@inject ILessonService lessonService
@inject NavigationManager navMgr
@if (Lesson != null)
{
    <div>
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h3>Update Lesson</h3>
            <button type="button" class="btn btn-light align-self-end" @onclick="@Close">
                <span class="oi oi-x"></span>
            </button>
        </div>
        <div class="form-floating mb-3">
            <input type="text" class="form-control" id="floatingInput" @bind="Lesson.Topic">
            <label for="floatingInput">Topic</label>

        </div>
        <br/>
        <div class="form-floating mb-3">
            <input type="date" class="form-control" id="floatingInput" @bind="Date">
            <label for="floatingInput">Date</label>
        </div>
        <br/>
        <div class="form-floating">
            <textarea class="form-control" id="floatingTextarea" @bind="Lesson.Description"></textarea>
            <label for="floatingTextarea">Description</label>
        </div>
        <br/>
@if (Msg != null)
{
    <div class="alert-danger alert mt-5">
        @Msg
    </div>
}

        <div class="button-row">
            <button @onclick="UpdateAsync" type="button" class="btn btn-primary">Update Lesson</button>
        </div>
    </div>
}



@code {

    [Parameter]
    public string ClassId { get; set; }

    [Parameter]
    public string LessonId { get; set; }

    public DateTime Date { get; set; }
    private string? Msg { get; set; }
    public Lesson Lesson { get; set; }


    protected override async Task OnInitializedAsync()

    {
        Date = DateTime.Now;
        Msg = null;
        try
        {
            Lesson = await lessonService.GetByIdAsync(UserHttpClient.Jwt, LessonId);
        }
        catch (Exception e)
        {
            Msg = e.Message;
        }
    }


    private async Task UpdateAsync()
    {
        try
        {
            await lessonService.UpdateLessonAsync(UserHttpClient.Jwt, new LessonUpdateDTO{ Id = Lesson.Id, Date = Date.ToFileTimeUtc(), Description = Lesson.Description, Topic = Lesson.Topic});
            Msg = "Lesson updated successfully!";
            navMgr.NavigateTo($"/my-classes/{ClassId}");
        }
        catch (Exception e)
        {
            Msg = e.Message;
        }
    }


    private void Close()
    {
        navMgr.NavigateTo($"/my-classes/{ClassId}");
    }

}